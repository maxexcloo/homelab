[tools]
1password = "latest"
age = "latest"
opentofu = "latest"
sops = "latest"

[env]
TF_CLI_ARGS_init = "-upgrade"
TF_CLI_ARGS_plan = "-compact-warnings -parallelism=20"
TF_CLI_ARGS_apply = "-compact-warnings -parallelism=20"

# Setup
[tasks.setup]
description = "Initial project setup"
run = """
echo "üîß Setting up project..."

# Check for required tokens
if [[ ! -f .mise.local.toml ]]; then
    echo "üìÑ Creating .mise.local.toml template..."
    cp .mise.local.toml.default .mise.local.toml
    echo "‚úÖ Created .mise.local.toml - please add your tokens"
    exit 1
fi

# Create providers entry in 1Password if it doesn't exist
echo "üîë Checking providers entry..."
if ! op item get --vault "Homelab" "providers" 2> /dev/null; then
    echo "üìù Creating providers entry..."
    op item create \
        --category="Login" \
        --title="providers" \
        --vault="Homelab" || echo "‚ùå Failed to create providers entry"

    echo "üìã Adding provider fields..."
    op item edit --vault="Homelab" "providers" \
        'b2.application_key[concealed]=REPLACE_ME' \
        'b2.application_key_id[text]=REPLACE_ME' \
        'cloudflare.account_id[text]=REPLACE_ME' \
        'cloudflare.api_key[concealed]=REPLACE_ME' \
        'cloudflare.email[text]=REPLACE_ME' \
        'github.token[concealed]=REPLACE_ME' \
        'resend.api_key[concealed]=REPLACE_ME' \
        'tailscale.oauth_client_id[text]=REPLACE_ME' \
        'tailscale.oauth_client_secret[concealed]=REPLACE_ME' \
        'tailscale.tailnet[text]=REPLACE_ME' 2>/dev/null || echo "‚ö†Ô∏è  Could not add all provider fields"
else
    echo "‚úÖ Providers entry exists"
fi

echo "‚úÖ Setup complete!"
"""

[tasks.init]
description = "Initialize OpenTofu"
run = "tofu init"

# Development
[tasks.check]
description = "Format and validate"
depends = ["fmt", "validate"]

[tasks.fmt]
description = "Format all files"
run = "tofu fmt -recursive"

[tasks.validate]
description = "Validate configurations"
run = "tofu validate"

# Deployment
[tasks.refresh]
description = "Check for configuration drift"
run = "tofu refresh"

[tasks.plan]
description = "Plan all changes"
run = "tofu plan"

[tasks.apply]
description = "Apply all changes"
run = """
# Apply all changes
if [[ -n "$CI" ]] || [[ "$MISE_YES" == "true" ]]; then
  tofu apply -auto-approve
else
  tofu apply
fi
"""
